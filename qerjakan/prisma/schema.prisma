// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TokenType {
  ForgotPassword
  VerifyAccount
  VerifySeller
}
enum NotificationType {
  Transaction
  Updates
  Chat
}
enum OrderStatus {
  active
  pending
  denied
  request_refund
  complete
  refund
}

enum InOutCompanyTransaction {
  payment
  payout
}

enum NotificationRole {
  Seller
  Buyer
}



enum BankName {
  Mandiri
  BCA
  BNI
  BRI
}

enum TransactionStatus {
  authorize
  capture
  settlement
  deny
  pending
  cancel
  refund
  partial_refund
  chargeback
  partial_chargeback
  expire
  failure
}
enum Gender {
  Male
  Female
}
enum UserRole {
  User
  Admin
}


enum CompanyTransactionStatus {
  pending
  settlement
  failed
}

enum ReportStatus {
  pending
  revision
  deliver
}

enum ComplainStatus {
  Pending
  Accepted
  Rejected
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  gender          String
  dateBirth       DateTime
  userRole        UserRole?
  pin             Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isSeller        Boolean @default(false)
  userBalance     Int @default(0)
  accounts Account[]
  services Service[]
  userRating Reviews[]
  userOrder Order[]
  userTransaction Transaction[]
  messages Message[]
  companyTransaction CompanyTransaction[]
  profiles Profile?
  userbank UserBankAccount?
  hasNotif Boolean?
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  notifications Notification[]
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
}
model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  keyId              String?
  hasSeen            Boolean @default(false)
  userId             String @db.ObjectId
  createdAt          DateTime @default(now())
  NotifType          NotificationType?
  NotifRole          NotificationRole?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Reviews {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  rating Int
  reviewText String?
  serviceId String @db.ObjectId
  image String[]
  reviewerId String @db.ObjectId
  createdAt DateTime @default(now())
  user User @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model UserBankAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  bank_name BankName
  account_number Int
  account_name String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  description String?
  country String?
  language String[]
  skill String[]
  college_name String?
  college_title String?
  college_major String?

  
  user User @relation(fields: [userId], references: [id])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String @db.ObjectId
  buyerId String @db.ObjectId
  sellerId String
  buyerName String
  sellerName String
  orderid String
  price Int
  revisionCount Int
  hasRefund Boolean?
  deliverDaysCount Int
  onReview Boolean? @default(false)
  orderStatus OrderStatus @default(pending)
  isCompleted Boolean @default(false)
  reviewed Boolean?
  payment_type String
  createdAt DateTime @default(now())
  startAt   DateTime?
  report Report[]
  complain ComplainAdmin[]
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user User @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model ComplainAdmin {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  description String 
  image String
  complainType String
  createdAt DateTime @default(now())
  complainStatus ComplainStatus
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Report {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  linkReport String?
  imageReport String[]
  reportStatus ReportStatus @default(pending)
  orderid String @db.ObjectId
  description String
  createdAt DateTime @default(now())
  order Order @relation(fields: [orderid], references: [id], onDelete: Cascade)
}



model Transaction {
  id  String @id  @map("_id") 
  amount       Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  userId       String            @db.ObjectId
  buyerName    String
  serviceId    String            @db.ObjectId 
  gross_amount Int               @db.Int
  payment_type String
  status       TransactionStatus @default(pending)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyBalance{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  balance Int? @default(10000000)
}

model CompanyTransaction {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  createdAt DateTime @default(now())
  amount Int
  payment_type String
  final_balance Int
  status CompanyTransactionStatus @default(pending)
  InOutStatus InOutCompanyTransaction
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service{
   id  String @id @default(auto()) @map("_id") @db.ObjectId
   sellerId String @db.ObjectId
   title String
   description String
   image String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   price Int
   deliveryTime Int
   revisions Int
   orderSuccess Int @default(0)
   categoryId String @db.ObjectId
   subcategoryId String @db.ObjectId
   serviceRating Reviews[]
   orders Order[]
   serviceTransaction Transaction[]
   serviceStatus String? @default("active")
   subcategory SubCategory @relation(fields: [subcategoryId], references: [id])
   category Category @relation(fields: [categoryId], references: [id])
   user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}


model Category{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  subcategory SubCategory[]
  category_name String
  service Service[]
  
}

model SubCategory {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  subcategory_name String
  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  service Service[]
}

model Skills {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  skills_name String
}

model Education {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  college_name String?
}

model CollegeMajor{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  college_major String @db.String

}

model CollegeTitle{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  college_title String

}

model Languages{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  languages_name String
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}



model ForgotPasswordToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  token String
  email String
  tokenType TokenType?
  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
